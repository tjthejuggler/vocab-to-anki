-allow for extra fields to be input so i can do stuff like this chart
	https://www.tutormandarin.net/en/1000-most-common-chinese-words/

-make a combine _failed_words program

-make a program that gets makes all audio files lowercase

-make everything get changed to lower case before being added to dictionaries, lists, mp3s, and when we look at these things

-we should have a translate option that is 'preserve phrases that keeps chunks of text together if it is between punctuation' so we can translate entire phrases

-make a confirmation of how many words will be downloaded/translated
	-it could quickly tell
		how many of the words we already have
		how many have previously failed
		how may it is going to attempt
	-at the end it can give a report that says
		how many were successfully download
		how many failed
	-it can also give a file printout that tells
		 which words were download
		 which words failed
-for now lets either make an unformated to formatted setup
	and
	formatted to cards setup
	we can combine them later
-make optional "hint" language when making cards
-make instructions for translation export


-clean up mainaudio.py to make it more readable

PRONUNCIATION PLAYER
-We could also make every word have a pronunciation with a button for each word. 
-If there are just two words we could make them be pronounced seperately with two recordings if they don't exist together as a single recording.

-We should automatically make lists of unpronounced words, words that forvo doesn't have pronunciations for so we can request them





run other turkish 101 stuff through here:
	single word vocab from 250 phrases(once completed)
	turkish filler words
	150 Most Common Phrases in Turkish(once completed)

do this for single words in turkish_conversation
	TurkishClass101 Word Power Audible (in turkish_vocab)

replace original txt lists with swapped versions
the swapper could have a smaller name and it could do smart swapping to put turkish words first(or whatever foreign words)




check to see if video has subtitles, if it does, then find the timestamp on the first instance of each word and make the url automatically have that timestamp built in
